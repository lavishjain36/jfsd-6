15min
1.Create a class Employee->
   1.create 3 entity->name,age,department
   2.create constructor for it
   3.getter,setter and override toString()


2.create main class->
list of employees-5 object 

classname obj=new Classname();
Pavan 30 Engineering
Suman 25  Marketing
Jack  35  Engineering
Joy   28   Human Resource
Jenny 40   Marketing

//Functional programming 
1.Filter employees who are younger than 30
2.Count employees in each department
3.Find the oldest employee->
4.map all the employee to their names


package com.employeetask;

public class Employee {
	
	
	private String name;
	private int age;
	private String department;
	
	//constructor 
	public Employee(String name, int age, String department) {
		super();
		this.name = name;
		this.age = age;
		this.department = department;
	}
	//create getter & setter

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	@Override
	public String toString() {
		return "Employee [name=" + name + ", age=" + age + ", department=" + department + "]";
	}
	
}



package com.employeetask;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class EmployeeMain {

	public static void main(String[] args) {
		
		//Create an array of List using employee
		List<Employee> employees=Arrays.asList(
				new Employee("Pavan", 30,"Engineering"),
				new Employee("Suman", 25,"Marketing"),
				new Employee("Jack", 35,"Engineering"),
				new Employee("Joy", 28,"Human Resource"),
				new Employee("Jenny", 40,"Marketing")
				);
		
		
		//Filter the data younger than 30
//		1.Filter employees who are younger than 30
		List<Employee> youngemployees=employees.stream()
				.filter(employee->employee.getAge()<30)
				.collect(Collectors.toList());
		System.out.println(youngemployees);
		
		
		employees.stream()
				 .collect(Collectors.groupingBy(Employee::getDepartment,Collectors.counting()))
				 .forEach((department,count)->System.out.println(department+": "+count+" employees"));
		
		
		//map all the employees 
		
		List<String> names=employees.stream().map(Employee::getName).collect(Collectors.toList());
		System.out.println(names);
		
		
		//Oldest employee
		Employee oldestemp=employees.stream()
				.reduce((e1,e2)->e1.getAge()>e2.getAge()?e1:e2).orElse(null);
		
		System.out.println(oldestemp);
		
		
		//sort the employee age
//		List<Employee> sortednamebyage=employees.stream()
//						.sorted(Comparator
//								.comparingInt(Employee::getAge)).toList();
		
		
		List<Employee> sortednamebyage=employees.stream()
				.sorted((e1,e2)->Integer.compare(e1.getAge(), e2.getAge()))
				.collect(Collectors.toList());
		
		
		System.out.println(sortednamebyage);
		
		//Find the employee data where department is Marketing
		
		List<Employee> markdept=employees.stream()
				.filter(emp->emp.getDepartment().equals("Marketing"))
				.collect(Collectors.toList());
		
		List<Employee> engdept=employees.stream()
				.filter(emp->emp.getDepartment().equals("Engineering"))
				.collect(Collectors.toList());
		
		System.out.println(markdept);
		System.out.println(engdept);

		
		
		//Find names of employees less than 30 -[suman,joy]
		
		List<String> namesemp=employees.stream()
				.filter(emp->emp.getAge()<30)
				.map(Employee::getName)
				.collect(Collectors.toList());
		System.out.println(namesemp);
		
		
	}

}










